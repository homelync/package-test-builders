"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("../../logging/logger");
const chai_1 = require("chai");
describe(`formatting`, () => {
    // tslint:disable-next-line:no-empty
    it(`should insert an event id if not supplied`, async () => {
        const log = logger_1.format({ level: 'info', message: '' });
        chai_1.expect(log).to.include(0);
    });
    it(`should use event id if supplied`, async () => {
        const log = logger_1.format({ level: 'info', message: '#456 message' });
        chai_1.expect(log).to.include('456 log message');
    });
    it(`should insert an event type if not supplied`, async () => {
        const log = logger_1.format({ level: 'info', message: 'message' });
        chai_1.expect(log).to.include('0 log message');
    });
    it(`should use event type if supplied`, async () => {
        const log = logger_1.format({ level: 'info', message: '#loralog# message' });
        chai_1.expect(log).to.include('0 loralog message');
    });
    it(`should use event type if supplied with an eventid`, async () => {
        const log = logger_1.format({ level: 'info', message: '#123 #loralog# message' });
        chai_1.expect(log).to.include('123 loralog message');
    });
    it(`all with message`, async () => {
        const log = logger_1.format({ level: 'info', message: '#123 #loralog# this is my message there are many like it' });
        chai_1.expect(log).to.include('123 loralog this is my message there are many like it');
    });
});
//# sourceMappingURL=logger.spec.js.map